#!/usr/bin/env python
# -*- coding: utf-8 -*-

#@Author: Carl Dubois
#@Email: c.dubois@f5.com
#@Description: Create a simple application 
#@Product: BIGIQ
#@VersionIntroduced: 5.x

"""
Copyright 2017 by F5 Networks Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import os
import sys
import base64
import string
import requests
import time

requests.packages.urllib3.disable_warnings()

try:
    import json
except ImportError:
    import simplejson as json

def get_device(config):
    ## Get a BIGIP device which application node will live.
    uri = 'https://' + config['bigiq'] + '/mgmt/shared/resolver/device-groups/cm-adccore-allbigipDevices/devices'
    response = requests.get(uri, auth=(config['iq_user'], config['iq_pass']), verify=False)
    
    for item in response.json()['items']:
        if item['address'] == config['bigip']:
            device = item['selfLink']
            break
    
    return device

def create_node(config, device):
    selflink=None
    print "\n==================================================================="    
    print "Create a node in BIG-IQ that represents an application server."
    print "===================================================================\n"
    uri = 'https://' + config['bigiq'] + '/mgmt/cm/adc-core/working-config/ltm/node'
    data_json = {"partition": "Common", "name": config['node_name'], "address": config['node_address'], "deviceReference": {"link": str(device)}}
    response = requests.post(uri, data=str(data_json), auth=(config['iq_user'], config['iq_pass']), verify=False) 
    ## DEBUG ##
    # print json.dumps(response.json(), default=lambda o: o.__dict__, sort_keys=True, indent=4)
    ###########

    if response.status_code==200:
        print "Application node: {0} created.".format(response.json()['name'])
        return response.json()['selfLink']
    else:
        print "INFO: {0}".format(response.json()['message'])
        sys.exit(1)
                                 
def create_pool_add(config, node, device):  
    print "\n======================================================================"    
    print "Create a pool in BIG-IQ that will act as a container for node members."
    print "=====================================================================\n"
    uri = 'https://' + config['bigiq'] + '/mgmt/cm/adc-core/working-config/ltm/pool'
    data_json = {"partition": "Common", "name": config['pool_name'], "loadBalancingMode": config['load_balance_mode'], "deviceReference": {"link": str(device)}}
    response_pool = requests.post(uri, data=str(data_json), auth=(config['iq_user'], config['iq_pass']), verify=False) 
    ## DEBUG ##
    # print json.dumps(response.json(), default=lambda o: o.__dict__, sort_keys=True, indent=4)
    ###########

    if response_pool.status_code==200:
        print "Application Pool: {0} created.".format(response_pool.json()['name'])
    else:
        print "ERROR: {0}".format(response_pool.json()['message'])
        sys.exit(1)

    time.sleep(2)
    print "\n======================================= "    
    print "Add a pool member node to a BIGIQ pool."
    print "=======================================\n"
    ## Construct pool url
    pool_link = response_pool.json()['selfLink'] 
    pool_link += '/members'
    pool_link = pool_link.replace('localhost', config['bigiq'])
    node_link = node.replace('localhost', config['bigiq'])

    ## GET node details
    response_node = requests.get(node_link, auth=(config['iq_user'], config['iq_pass']), verify=False)
    node_name = response_node.json()['name'] + ":" + config['virtual_dest_port']
    data_json = {"partition": "Common", "name": str(node_name), "port": config['virtual_dest_port'], "nodeReference": {"link": str(node)}}
    response_add = requests.post(pool_link, data=str(data_json), auth=(config['iq_user'], config['iq_pass']), verify=False) 
    
    ## DEBUG ##
    # print json.dumps(response_add.json(), default=lambda o: o.__dict__, sort_keys=True, indent=4)
    ###########
    
    if response_add.status_code==200:
        print "Application Pool: {0} created and Node {1} added as a member.".format(response_pool.json()['name'], node_name)
        return response_pool.json()['selfLink']
    else:
        print "ERROR: {0}".format(response_add.json()['message'])
        sys.exit(1)

def create_virtual_add(config, pool, device):
    print "\n======================================================================================="    
    print "Create a virtual server in BIG-IQ that will act as a container for pool and its members."
    print "=======================================================================================\n"
    uri = 'https://' + config['bigiq'] + '/mgmt/cm/adc-core/working-config/ltm/virtual'
    data_json = {"partition": "Common", "name": config['virtual_server_name'], "destinationAddress": config['virtual_dest_address'], "mask": config['virtual_netmask'], "destinationPort": config['virtual_dest_port'], "sourceAddress": config['virtual_source_range'], "poolReference": {"link": str(pool)}, "deviceReference": {"link": str(device)}}
    ## POST to create virtual server, pool reference is part of the json data. 
    response_virtual = requests.post(uri, data=str(data_json), auth=(config['iq_user'], config['iq_pass']), verify=False) 
    ## DEBUG ##
    # print json.dumps(response.json(), default=lambda o: o.__dict__, sort_keys=True, indent=4)
    ###########
    pool = pool.replace('localhost', config['bigiq'])
    response_pool = requests.get(pool, auth=(config['iq_user'], config['iq_pass']), verify=False)

    if response_virtual.status_code==200:
        print "Virtual Server: {0} created and pool {1} added.".format(response_virtual.json()['name'], response_pool.json()['name'])
        return True
    else:
        print "ERROR: {0}".format(response.json()['message'])
        return False
    
if __name__ == '__main__':
    #==========================
    # Help
    #==========================
    config={}
    import argparse

    parser = argparse.ArgumentParser(description='List all virutals and devices each live on.')
    parser.add_argument('--config', type=str, help='Configuration, IQ-IP address, user, pass.')

    args = parser.parse_args()
    
    #==========================
    # Read config file
    #==========================    
    file = args.config
    
    infile = open (file, 'r')
    for line in infile:
        (key, val) = line.split(' = ')
        config[str(key)] = val.strip('\n')
        

    #==========================
    # Auth
    #==========================
    device = get_device(config)
    time.sleep(2)
    node = create_node(config, device)
    time.sleep(2)
    pool = create_pool_add(config, node, device)
    time.sleep(2)
    virtual = create_virtual_add(config, pool, device)

    if virtual == True: 
        print '\nSUCCESS: - COMPLETE.\n'
    else:
        print '\nERROR: - NOT-COMPLETE\n'
